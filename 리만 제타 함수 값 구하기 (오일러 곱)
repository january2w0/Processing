int N = 5000;  // N의 범위 정하기
int n = 1; 
int Nf = 0;  // Number of factors
int Np = 0;  // Number of primes
ArrayList Prime = new ArrayList();
int s = 2;  // 제곱할 값
double y = 1;
double pi = Math.pow(PI,s);

void setup() {
  size(1500,500);
  while (n < N) {  
    n++;
    int Previous = Np;
    Np = 0;
    ArrayList Prime = new ArrayList();
    for (int k=2; k<=n; k++) {
      Nf = 0;
      for (int i=1; i*i<=k; i++) {
        if (k%i == 0) {
          Nf++;
        }
      }
      if (Nf == 1) {
        Np++;
        Prime.add(Np-1, k);
      }
    }
    float Np1 = Np;
    print("N:", n, " ");
    print("Np:", Np, " ");
    float P = (Np1/n) * 100;  // n까지의 소수 밀도를 백분율로 나타냄.
    print("P:", P, "%", " ");
    
    if (Previous - Np != 0) {
      y *= (Math.pow((int)Prime.get(Np-1),s)/(Math.pow((int)Prime.get(Np-1),s) - 1));
    }
    println("ζ(s):", y, "=", "π^("+s+")"+"/"+1/(y/pi));  // 리만 제타 함수의 값 출력하기
    
    println(Prime); // N까지의 모든 소수 출력하기
    println(" ");
    
    point(n/5*2,500-P*5);  // x축 n, y축 밀도 그래프 그리기
  }
}
